import type { InstanceOptions, IOContext } from '@vtex/api';
import type { DocumentResponse, WithMetadata, PaginationArgs, ScrollInput } from '.';
import { MasterDataEntity } from '.';
export declare class MasterDataEntityV1<TEntity extends Record<string, any>> extends MasterDataEntity<TEntity> {
    dataEntity: string;
    schema: string;
    private inner;
    constructor(ctx: IOContext, options?: InstanceOptions);
    save(entity: TEntity): Promise<DocumentResponse>;
    update(id: string, fields: Partial<TEntity>): Promise<void>;
    saveOrUpdate(fields: TEntity & {
        id: string;
    }): Promise<DocumentResponse>;
    saveOrUpdatePartial(fields: TEntity & {
        id: string;
    }): Promise<DocumentResponse>;
    delete(id: string): Promise<import("@vtex/api").IOResponse<void>>;
    search<K extends keyof WithMetadata<TEntity>>(pagination: PaginationArgs, fields: Array<ThisType<K> | '_all'>, sort?: string, where?: string): Promise<Array<Pick<WithMetadata<TEntity>, K>>>;
    searchRaw<K extends keyof WithMetadata<TEntity>>(pagination: PaginationArgs, fields: Array<ThisType<K> | '_all'>, sort?: string, where?: string): Promise<{
        data: Array<Pick<WithMetadata<TEntity>, K>>;
        pagination: {
            total: number;
            page: number;
            pageSize: number;
        };
    }>;
    get<K extends keyof WithMetadata<TEntity>>(id: string, fields: Array<ThisType<K> | '_all'>): Promise<Pick<WithMetadata<TEntity>, K>>;
    scroll<K extends keyof WithMetadata<TEntity>>(input: ScrollInput<K>): Promise<{
        mdToken: string;
        data: Pick<WithMetadata<TEntity>, K>[];
    }>;
}
