"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MasterDataEntityV1 = void 0;
const api_1 = require("@vtex/api");
const _1 = require(".");
const decorators_1 = require("../decorators");
const services_1 = require("../services");
const GLOBAL = '';
const versionDescriptor = (isProduction, workspace) => isProduction ? GLOBAL : `-${workspace}`;
let MasterDataEntityV1 = class MasterDataEntityV1 extends _1.MasterDataEntity {
    constructor(ctx, options) {
        super(ctx, options);
        const { app: { version: appVersion }, entityName, } = services_1.CreateEntityConfigurationService.getInstance().getEntityDetails();
        this.dataEntity = entityName;
        this.inner = new api_1.MasterData(ctx, options);
        this.schema = `${appVersion}${versionDescriptor(ctx.production, ctx.workspace)}`;
    }
    async save(entity) {
        return this.inner.createDocument({
            dataEntity: this.dataEntity,
            fields: entity,
            schema: this.schema,
        });
    }
    async update(id, fields) {
        return this.inner.updatePartialDocument({
            dataEntity: this.dataEntity,
            id,
            fields,
            schema: this.schema,
        });
    }
    async saveOrUpdate(fields) {
        return this.inner.createOrUpdateEntireDocument({
            dataEntity: this.dataEntity,
            fields,
            schema: this.schema,
        });
    }
    async saveOrUpdatePartial(fields) {
        return this.inner.createOrUpdatePartialDocument({
            dataEntity: this.dataEntity,
            fields,
            schema: this.schema,
        });
    }
    async delete(id) {
        return this.inner.deleteDocument({ dataEntity: this.dataEntity, id });
    }
    // eslint-disable-next-line max-params
    async search(pagination, fields, sort, where) {
        return this.inner.searchDocuments({
            dataEntity: this.dataEntity,
            pagination,
            fields: fields.map((field) => field.toString()),
            sort,
            where,
            schema: this.schema,
        });
    }
    // eslint-disable-next-line max-params
    async searchRaw(pagination, fields, sort, where) {
        return this.inner.searchDocumentsWithPaginationInfo({
            dataEntity: this.dataEntity,
            pagination,
            fields: fields.map((field) => field.toString()),
            sort,
            where,
            schema: this.schema,
        });
    }
    async get(id, fields) {
        return this.inner.getDocument({
            dataEntity: this.dataEntity,
            id,
            fields: fields.map((field) => field.toString()),
        });
    }
    async scroll(input) {
        const { mdToken, data } = await this.inner.scrollDocuments({
            ...input,
            dataEntity: this.dataEntity,
            fields: input.fields.map((field) => field.toString()),
            schema: this.schema,
        });
        /**
         * The scroll method on Master Data's client is mistyped (duplicating the object)
         */
        return {
            mdToken,
            data: data,
        };
    }
};
MasterDataEntityV1 = __decorate([
    decorators_1.buildSchemaDecorator
], MasterDataEntityV1);
exports.MasterDataEntityV1 = MasterDataEntityV1;
