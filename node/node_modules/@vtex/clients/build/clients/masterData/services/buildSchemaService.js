"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildSchemaService = void 0;
function buildSchemaService({ app, context, masterdataClient, dataEntityName, schemaBuilderVersion, }) {
    var _a;
    const schemaBuilders = new SchemaBuilders({
        app,
        context,
        masterdataClient,
        dataEntityName,
    });
    const schemaBuilderInstance = `executeSchemaBuilderV${schemaBuilderVersion}`;
    return ((_a = schemaBuilders.schemaBuilderExecutors[schemaBuilderInstance]) !== null && _a !== void 0 ? _a : schemaBuilders.schemaBuilderExecutors.executeSchemaBuilderDefault);
}
exports.buildSchemaService = buildSchemaService;
class SchemaBuilders {
    constructor({ app, context, masterdataClient, dataEntityName, }) {
        this.schemaBuilderExecutors = {
            executeSchemaBuilderDefault: this.schemaBuilderV1.bind(this),
            executeSchemaBuilderV1: this.schemaBuilderV1.bind(this),
            executeSchemaBuilderV2: this.schemaBuilderV2.bind(this),
        };
        this.versionDescriptor = (isProduction, workspace) => isProduction ? '' : `-${workspace}`;
        this.app = app;
        this.context = context;
        this.masterdataClient = masterdataClient;
        this.dataEntityName = dataEntityName;
    }
    /**
     * This is necessary since masterdata does not accept special characters on entity name
     * This function replaces `.` and `-` for `_`
     * @param str dataEntityName
     */
    normalizeEntityName(str) {
        return str.replace(/(\.)|-|:|@/gi, '_');
    }
    schemaBuilderV1() {
        const { production, workspace } = this.context;
        return `${this.app.version}${this.versionDescriptor(production, workspace)}`;
    }
    async schemaBuilderV2() {
        const { workspace, logger } = this.context;
        const documentId = this.normalizeEntityName(`${this.app.locator}:${workspace}:${this.dataEntityName}`);
        try {
            const { associatedSchema } = await this.masterdataClient.getDocument({
                dataEntity: 'vtex_builder_hub_appId_to_schema',
                fields: ['_all'],
                id: documentId,
            });
            return associatedSchema === null || associatedSchema === void 0 ? void 0 : associatedSchema.name;
        }
        catch (error) {
            logger.error({
                client: 'masterdataFor',
                entity: this.dataEntityName,
                workspace,
                error: 'No associated schema was found for current app version and workspace',
            });
            throw new Error('No associated schema was found for current app version and workspace');
        }
    }
}
