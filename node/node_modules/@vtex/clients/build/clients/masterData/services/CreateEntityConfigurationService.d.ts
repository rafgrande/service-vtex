import type { InstanceOptions, IOContext, MasterData, ParsedLocator } from '@vtex/api';
import type { buildSchemaService as IBuildSchemaService } from '.';
interface EntityConfigurationInstanceParams {
    builderMajor: number;
    buildSchemaService: typeof IBuildSchemaService;
    entityName: string;
    providerAppId: Maybe<string>;
}
interface ConstructedCreateEntityConfigurationService {
    getSchema: (masterdataClient: typeof MasterData, context: IOContext, options?: InstanceOptions) => Promise<string>;
    getEntityDetails: () => {
        entityName: string;
        app: ParsedLocator;
    };
}
export declare class CreateEntityConfigurationService implements ConstructedCreateEntityConfigurationService {
    private buildSchemaService;
    private static instance?;
    private entityName;
    private app;
    private schemaBuilderVersion;
    static getInstance(): CreateEntityConfigurationService;
    static setInstance({ builderMajor, buildSchemaService, entityName, providerAppId, }: EntityConfigurationInstanceParams): void;
    /**
     * This is necessary since masterdata does not accept special characters on entity name
     * This function replaces `.` and `-` for `_`
     * @param str dataEntityName
     */
    private normalizeEntityName;
    private constructor();
    getSchema(MasterdataClient: typeof MasterData, context: IOContext, options?: InstanceOptions): Promise<string>;
    getEntityDetails(): {
        entityName: string;
        app: ParsedLocator;
    };
}
export {};
