"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateEntityConfigurationService = void 0;
const api_1 = require("@vtex/api");
class CreateEntityConfigurationService {
    constructor({ buildSchemaService, entityName, providerAppId, schemaBuilderVersion, }) {
        this.buildSchemaService = buildSchemaService;
        this.app = (0, api_1.parseAppId)(providerAppId !== null && providerAppId !== void 0 ? providerAppId : process.env.VTEX_APP_ID);
        this.entityName = entityName;
        this.schemaBuilderVersion = schemaBuilderVersion;
    }
    static getInstance() {
        if (this.instance) {
            return this.instance;
        }
        throw new Error('No instance of CreateEntityConfigurationService was instantiated');
    }
    static setInstance({ builderMajor, buildSchemaService, entityName, providerAppId, }) {
        this.instance = new CreateEntityConfigurationService({
            buildSchemaService,
            entityName,
            providerAppId,
            schemaBuilderVersion: builderMajor,
        });
    }
    /**
     * This is necessary since masterdata does not accept special characters on entity name
     * This function replaces `.` and `-` for `_`
     * @param str dataEntityName
     */
    normalizeEntityName(str) {
        return str.replace(/(\.)|-|:|@/gi, '_');
    }
    async getSchema(MasterdataClient, context, options) {
        const masterdataClient = new MasterdataClient(context, {
            ...options,
            headers: {
                ...options === null || options === void 0 ? void 0 : options.headers,
                'x-vtex-accept-not-found': 'true',
            },
        });
        const schemaBuilt = this.buildSchemaService({
            app: this.app,
            dataEntityName: this.entityName,
            masterdataClient,
            schemaBuilderVersion: this.schemaBuilderVersion,
            context,
            options,
        }).bind(this);
        return schemaBuilt();
    }
    getEntityDetails() {
        return {
            entityName: this.normalizeEntityName(`${this.app.name}_${this.entityName}`),
            app: this.app,
        };
    }
}
exports.CreateEntityConfigurationService = CreateEntityConfigurationService;
